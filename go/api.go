// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Flow Learning - OpenAPI 3.1
 *
 * api for flow learning
 *
 * API version: 1.0.0
 * Contact: floTeam@gmail.com
 */

package openapi

import (
	"context"
	"net/http"
)



// AllAPIRouter defines the required methods for binding the api requests to a responses for the AllAPI
// The AllAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AllAPIServicer to perform the required actions, then write the service results to the http response.
type AllAPIRouter interface { 
	ClipImage(http.ResponseWriter, *http.Request)
}
// MapAPIRouter defines the required methods for binding the api requests to a responses for the MapAPI
// The MapAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MapAPIServicer to perform the required actions, then write the service results to the http response.
type MapAPIRouter interface { 
	GetMapById(http.ResponseWriter, *http.Request)
	AddEdge(http.ResponseWriter, *http.Request)
	DeleteEdge(http.ResponseWriter, *http.Request)
}
// NodeAPIRouter defines the required methods for binding the api requests to a responses for the NodeAPI
// The NodeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a NodeAPIServicer to perform the required actions, then write the service results to the http response.
type NodeAPIRouter interface { 
	GetNode(http.ResponseWriter, *http.Request)
	AddNode(http.ResponseWriter, *http.Request)
	DeleteNode(http.ResponseWriter, *http.Request)
	UpdateNodeTitle(http.ResponseWriter, *http.Request)
	UpdateNodeVideoVote(http.ResponseWriter, *http.Request)
	UpdateNodeVideoEdit(http.ResponseWriter, *http.Request)
	UpdateNodeBattleVote(http.ResponseWriter, *http.Request)
	UpdateNodeFreshVote(http.ResponseWriter, *http.Request)
	UpdateNodeFlag(http.ResponseWriter, *http.Request)
}
// TopicAPIRouter defines the required methods for binding the api requests to a responses for the TopicAPI
// The TopicAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TopicAPIServicer to perform the required actions, then write the service results to the http response.
type TopicAPIRouter interface { 
	GetTopics(http.ResponseWriter, *http.Request)
	UpdateTopic(http.ResponseWriter, *http.Request)
	AddTopic(http.ResponseWriter, *http.Request)
	DeleteTopic(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	AuthUser(http.ResponseWriter, *http.Request)
	UpdateUser(http.ResponseWriter, *http.Request)
	GetUserByName(http.ResponseWriter, *http.Request)
	DeleteUser(http.ResponseWriter, *http.Request)
}


// AllAPIServicer defines the api actions for the AllAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AllAPIServicer interface { 
	ClipImage(context.Context, string) (ImplResponse, error)
}


// MapAPIServicer defines the api actions for the MapAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MapAPIServicer interface { 
	GetMapById(context.Context, string) (ImplResponse, error)
	AddEdge(context.Context, string, Edge) (ImplResponse, error)
	DeleteEdge(context.Context, string, string) (ImplResponse, error)
}


// NodeAPIServicer defines the api actions for the NodeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NodeAPIServicer interface { 
	GetNode(context.Context, string, string) (ImplResponse, error)
	AddNode(context.Context, NodeData) (ImplResponse, error)
	DeleteNode(context.Context, string, string) (ImplResponse, error)
	UpdateNodeTitle(context.Context, NodeData) (ImplResponse, error)
	UpdateNodeVideoVote(context.Context, NodeData) (ImplResponse, error)
	UpdateNodeVideoEdit(context.Context, NodeData) (ImplResponse, error)
	UpdateNodeBattleVote(context.Context, NodeData) (ImplResponse, error)
	UpdateNodeFreshVote(context.Context, NodeData) (ImplResponse, error)
	UpdateNodeFlag(context.Context, NodeData) (ImplResponse, error)
}


// TopicAPIServicer defines the api actions for the TopicAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TopicAPIServicer interface { 
	GetTopics(context.Context) (ImplResponse, error)
	UpdateTopic(context.Context, Topic) (ImplResponse, error)
	AddTopic(context.Context, Topic) (ImplResponse, error)
	DeleteTopic(context.Context, string) (ImplResponse, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	AuthUser(context.Context) (ImplResponse, error)
	UpdateUser(context.Context, User) (ImplResponse, error)
	GetUserByName(context.Context, string) (ImplResponse, error)
	DeleteUser(context.Context, string) (ImplResponse, error)
}
