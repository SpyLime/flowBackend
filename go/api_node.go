// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Flow Learning - OpenAPI 3.1
 *
 * api for flow learning
 *
 * API version: 1.0.0
 * Contact: floTeam@gmail.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// NodeAPIController binds http requests to an api service and writes the service results to the http response
type NodeAPIController struct {
	service NodeAPIServicer
	errorHandler ErrorHandler
}

// NodeAPIOption for how the controller is set up.
type NodeAPIOption func(*NodeAPIController)

// WithNodeAPIErrorHandler inject ErrorHandler into controller
func WithNodeAPIErrorHandler(h ErrorHandler) NodeAPIOption {
	return func(c *NodeAPIController) {
		c.errorHandler = h
	}
}

// NewNodeAPIController creates a default api controller
func NewNodeAPIController(s NodeAPIServicer, opts ...NodeAPIOption) *NodeAPIController {
	controller := &NodeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NodeAPIController
func (c *NodeAPIController) Routes() Routes {
	return Routes{
		"GetNode": Route{
			strings.ToUpper("Get"),
			"/api/v1/node",
			c.GetNode,
		},
		"UpdateNode": Route{
			strings.ToUpper("Put"),
			"/api/v1/node",
			c.UpdateNode,
		},
		"AddNode": Route{
			strings.ToUpper("Post"),
			"/api/v1/node",
			c.AddNode,
		},
		"DeleteNode": Route{
			strings.ToUpper("Delete"),
			"/api/v1/node",
			c.DeleteNode,
		},
	}
}

// GetNode - get wiki node
func (c *NodeAPIController) GetNode(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nodeIdParam string
	if query.Has("nodeId") {
		param := query.Get("nodeId")

		nodeIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "nodeId"}, nil)
		return
	}
	var tidParam string
	if query.Has("tid") {
		param := query.Get("tid")

		tidParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tid"}, nil)
		return
	}
	result, err := c.service.GetNode(r.Context(), nodeIdParam, tidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateNode - Update an node
func (c *NodeAPIController) UpdateNode(w http.ResponseWriter, r *http.Request) {
	updateNodeRequestParam := UpdateNodeRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateNodeRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateNodeRequestRequired(updateNodeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateNodeRequestConstraints(updateNodeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateNode(r.Context(), updateNodeRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddNode - Add a new node
func (c *NodeAPIController) AddNode(w http.ResponseWriter, r *http.Request) {
	addTopic200ResponseNodeDataParam := AddTopic200ResponseNodeData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addTopic200ResponseNodeDataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddTopic200ResponseNodeDataRequired(addTopic200ResponseNodeDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddTopic200ResponseNodeDataConstraints(addTopic200ResponseNodeDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddNode(r.Context(), addTopic200ResponseNodeDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteNode - Delete a node
func (c *NodeAPIController) DeleteNode(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nodeIdParam string
	if query.Has("nodeId") {
		param := query.Get("nodeId")

		nodeIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "nodeId"}, nil)
		return
	}
	var tidParam string
	if query.Has("tid") {
		param := query.Get("tid")

		tidParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tid"}, nil)
		return
	}
	result, err := c.service.DeleteNode(r.Context(), nodeIdParam, tidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
