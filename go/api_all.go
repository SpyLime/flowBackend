// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Flow Learning - OpenAPI 3.1
 *
 * api for flow learning
 *
 * API version: 1.0.0
 * Contact: floTeam@gmail.com
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AllAPIController binds http requests to an api service and writes the service results to the http response
type AllAPIController struct {
	service AllAPIServicer
	errorHandler ErrorHandler
}

// AllAPIOption for how the controller is set up.
type AllAPIOption func(*AllAPIController)

// WithAllAPIErrorHandler inject ErrorHandler into controller
func WithAllAPIErrorHandler(h ErrorHandler) AllAPIOption {
	return func(c *AllAPIController) {
		c.errorHandler = h
	}
}

// NewAllAPIController creates a default api controller
func NewAllAPIController(s AllAPIServicer, opts ...AllAPIOption) *AllAPIController {
	controller := &AllAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AllAPIController
func (c *AllAPIController) Routes() Routes {
	return Routes{
		"ClipImage": Route{
			strings.ToUpper("Get"),
			"/api/v1/clip/{clipUrl}",
			c.ClipImage,
		},
	}
}

// ClipImage - gets clip image
func (c *AllAPIController) ClipImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clipUrlParam := params["clipUrl"]
	if clipUrlParam == "" {
		c.errorHandler(w, r, &RequiredError{"clipUrl"}, nil)
		return
	}
	result, err := c.service.ClipImage(r.Context(), clipUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
