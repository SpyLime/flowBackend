// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Flow Learning - OpenAPI 3.1
 *
 * api for flow learning
 *
 * API version: 1.0.0
 * Contact: floTeam@gmail.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// MapAPIController binds http requests to an api service and writes the service results to the http response
type MapAPIController struct {
	service MapAPIServicer
	errorHandler ErrorHandler
}

// MapAPIOption for how the controller is set up.
type MapAPIOption func(*MapAPIController)

// WithMapAPIErrorHandler inject ErrorHandler into controller
func WithMapAPIErrorHandler(h ErrorHandler) MapAPIOption {
	return func(c *MapAPIController) {
		c.errorHandler = h
	}
}

// NewMapAPIController creates a default api controller
func NewMapAPIController(s MapAPIServicer, opts ...MapAPIOption) *MapAPIController {
	controller := &MapAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MapAPIController
func (c *MapAPIController) Routes() Routes {
	return Routes{
		"GetMapById": Route{
			strings.ToUpper("Get"),
			"/api/v1/map/{topicId}",
			c.GetMapById,
		},
		"AddEdge": Route{
			strings.ToUpper("Post"),
			"/api/v1/map/{topicId}/edge",
			c.AddEdge,
		},
		"DeleteEdge": Route{
			strings.ToUpper("Delete"),
			"/api/v1/map/{topicId}/edge",
			c.DeleteEdge,
		},
	}
}

// GetMapById - Find map by ID
func (c *MapAPIController) GetMapById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	topicIdParam := params["topicId"]
	if topicIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"topicId"}, nil)
		return
	}
	result, err := c.service.GetMapById(r.Context(), topicIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddEdge - Add a new edge
func (c *MapAPIController) AddEdge(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	topicIdParam := params["topicId"]
	if topicIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"topicId"}, nil)
		return
	}
	getMapById200ResponseEdgesInnerParam := GetMapById200ResponseEdgesInner{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getMapById200ResponseEdgesInnerParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetMapById200ResponseEdgesInnerRequired(getMapById200ResponseEdgesInnerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetMapById200ResponseEdgesInnerConstraints(getMapById200ResponseEdgesInnerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddEdge(r.Context(), topicIdParam, getMapById200ResponseEdgesInnerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteEdge - delete edge
func (c *MapAPIController) DeleteEdge(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	topicIdParam := params["topicId"]
	if topicIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"topicId"}, nil)
		return
	}
	var edgeIdParam time.Time
	if query.Has("edgeId"){
		param, err := parseTime(query.Get("edgeId"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "edgeId", Err: err}, nil)
			return
		}

		edgeIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{"edgeId"}, nil)
		return
	}
	result, err := c.service.DeleteEdge(r.Context(), topicIdParam, edgeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
