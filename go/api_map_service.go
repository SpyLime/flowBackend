// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Flow Learning - OpenAPI 3.1
 *
 * api for flow learning
 *
 * API version: 1.0.0
 * Contact: floTeam@gmail.com
 */

package openapi

import (
	"context"

    bolt "go.etcd.io/bbolt"
    "github.com/SpyLime/flowBackend/utility"
)

// MapAPIService is a service that implements the logic for the MapAPIServicer
// This service should implement the business logic for every endpoint for the MapAPI API.
// Include any external packages or services that will be required by this service.
type MapAPIService struct {
    db    *bolt.DB
	clock utility.Clock
}

// NewMapAPIService creates a default api service
func NewMapAPIService(db *bolt.DB, clock utility.Clock) *MapAPIService {
	return &MapAPIService{
        db: db,
        clock: clock,
    }
}

// GetMapById - Find map by ID
func (s *MapAPIService) GetMapById(ctx context.Context, topicId string) (ImplResponse, error) {

    response, err := getMapById(s.db, topicId)
    if err != nil {
        return Response(400, nil),err
    }

    return Response(200, response), nil

}

// AddEdge - Add a new edge
func (s *MapAPIService) AddEdge(ctx context.Context, topicId string, getMapById200ResponseEdgesInner GetMapById200ResponseEdgesInner) (ImplResponse, error) {
	
	_, err := PostEdge(s.db, topicId, getMapById200ResponseEdgesInner)
    if err != nil {
        return Response(405, nil),err
    }

    return Response(200, nil),nil

}
