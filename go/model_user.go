// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Flow Learning - OpenAPI 3.1
 *
 * api for flow learning
 *
 * API version: 1.0.0
 * Contact: floTeam@gmail.com
 */

package openapi


import (
	"time"
)



type User struct {

	Provider string `json:"provider,omitempty"`

	Id string `json:"id,omitempty"`

	LastLogin time.Time `json:"lastLogin,omitempty"`

	UpdatedAt time.Time `json:"updatedAt,omitempty"`

	CreatedAt time.Time `json:"createdAt,omitempty"`

	Username string `json:"username,omitempty"`

	FirstName string `json:"firstName,omitempty"`

	LastName string `json:"lastName,omitempty"`

	Email string `json:"email,omitempty"`

	// User Status
	Role int32 `json:"role,omitempty"`

	Reputation int32 `json:"reputation,omitempty"`

	Description string `json:"description,omitempty"`

	Location string `json:"location,omitempty"`

	IsFlagged bool `json:"isFlagged,omitempty"`

	BattleTestedUp []ResponseUserInfoInner `json:"battleTestedUp,omitempty"`

	BattleTestedDown []ResponseUserInfoInner `json:"battleTestedDown,omitempty"`

	FreshUp []ResponseUserInfoInner `json:"freshUp,omitempty"`

	FreshDown []ResponseUserInfoInner `json:"freshDown,omitempty"`

	Edited []ResponseUserInfoInner `json:"edited,omitempty"`

	Created []ResponseUserInfoInner `json:"created,omitempty"`

	Linked []LinkData `json:"linked,omitempty"`

	VideoUp []string `json:"videoUp,omitempty"`

	VideoDown []string `json:"videoDown,omitempty"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	for _, el := range obj.BattleTestedUp {
		if err := AssertResponseUserInfoInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BattleTestedDown {
		if err := AssertResponseUserInfoInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FreshUp {
		if err := AssertResponseUserInfoInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FreshDown {
		if err := AssertResponseUserInfoInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Edited {
		if err := AssertResponseUserInfoInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Created {
		if err := AssertResponseUserInfoInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Linked {
		if err := AssertLinkDataRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertUserConstraints checks if the values respects the defined constraints
func AssertUserConstraints(obj User) error {
	for _, el := range obj.BattleTestedUp {
		if err := AssertResponseUserInfoInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BattleTestedDown {
		if err := AssertResponseUserInfoInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FreshUp {
		if err := AssertResponseUserInfoInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FreshDown {
		if err := AssertResponseUserInfoInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Edited {
		if err := AssertResponseUserInfoInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Created {
		if err := AssertResponseUserInfoInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Linked {
		if err := AssertLinkDataConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
