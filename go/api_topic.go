// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Flow Learning - OpenAPI 3.1
 *
 * api for flow learning
 *
 * API version: 1.0.0
 * Contact: floTeam@gmail.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TopicAPIController binds http requests to an api service and writes the service results to the http response
type TopicAPIController struct {
	service TopicAPIServicer
	errorHandler ErrorHandler
}

// TopicAPIOption for how the controller is set up.
type TopicAPIOption func(*TopicAPIController)

// WithTopicAPIErrorHandler inject ErrorHandler into controller
func WithTopicAPIErrorHandler(h ErrorHandler) TopicAPIOption {
	return func(c *TopicAPIController) {
		c.errorHandler = h
	}
}

// NewTopicAPIController creates a default api controller
func NewTopicAPIController(s TopicAPIServicer, opts ...TopicAPIOption) *TopicAPIController {
	controller := &TopicAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TopicAPIController
func (c *TopicAPIController) Routes() Routes {
	return Routes{
		"GetTopics": Route{
			strings.ToUpper("Get"),
			"/api/v1/topic",
			c.GetTopics,
		},
		"UpdateTopic": Route{
			strings.ToUpper("Put"),
			"/api/v1/topic",
			c.UpdateTopic,
		},
		"AddTopic": Route{
			strings.ToUpper("Post"),
			"/api/v1/topic",
			c.AddTopic,
		},
		"DeleteTopic": Route{
			strings.ToUpper("Delete"),
			"/api/v1/topic/{topicId}",
			c.DeleteTopic,
		},
	}
}

// GetTopics - get all topics
func (c *TopicAPIController) GetTopics(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTopics(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTopic - Update an existing topic
func (c *TopicAPIController) UpdateTopic(w http.ResponseWriter, r *http.Request) {
	getTopics200ResponseInnerParam := GetTopics200ResponseInner{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getTopics200ResponseInnerParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetTopics200ResponseInnerRequired(getTopics200ResponseInnerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetTopics200ResponseInnerConstraints(getTopics200ResponseInnerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateTopic(r.Context(), getTopics200ResponseInnerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddTopic - Add a new topic
func (c *TopicAPIController) AddTopic(w http.ResponseWriter, r *http.Request) {
	getTopics200ResponseInnerParam := GetTopics200ResponseInner{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getTopics200ResponseInnerParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetTopics200ResponseInnerRequired(getTopics200ResponseInnerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetTopics200ResponseInnerConstraints(getTopics200ResponseInnerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddTopic(r.Context(), getTopics200ResponseInnerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteTopic - Delete a node
func (c *TopicAPIController) DeleteTopic(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	topicIdParam := params["topicId"]
	if topicIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"topicId"}, nil)
		return
	}
	result, err := c.service.DeleteTopic(r.Context(), topicIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
