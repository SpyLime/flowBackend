openapi: 3.1.0
info:
  contact:
    email: floTeam@gmail.com
  description: api for flow learning
  termsOfService: http://flow.schoolbucks.net/terms-of-service
  title: Flow Learning - OpenAPI 3.1
  version: 1.0.0
servers:
- url: https://flow.schoolbucks.net/api/v1
tags:
- description: Everything about topics
  name: topic
- description: details of the node map
  name: map
- description: Operations about user
  name: user
- description: "Operations about wiki page, which is all individual node data"
  name: node
paths:
  /clip/{clipUrl}:
    get:
      operationId: clipImage
      parameters:
      - description: url of clip
        explode: false
        in: path
        name: clipUrl
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: got the image address
        "400":
          description: failed to get the image address
      summary: gets clip image
      tags:
      - all
  /topic:
    get:
      description: get all topics
      operationId: getTopics
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Topic'
                type: array
          description: Successful operation
        "404":
          description: Topics not found
      summary: get all topics
      tags:
      - topic
    post:
      description: Add a new topic
      operationId: addTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
        description: Create a new topic
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePostTopic'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new topic
      tags:
      - topic
    put:
      description: Update an existing topic by Id
      operationId: updateTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
        description: Update an existent topic
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Topic not found
        "405":
          description: Validation exception
      summary: Update an existing topic
      tags:
      - topic
  /topic/{topicId}:
    delete:
      description: Deletes a specific node.
      operationId: deleteTopic
      parameters:
      - description: ID of the node to delete
        explode: false
        in: path
        name: topicId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: topic deleted successfully
        "400":
          description: Invalid topic ID
        "403":
          description: Forbidden
        "404":
          description: topic not found
      summary: Delete a node
      tags:
      - topic
  /map/{topicId}:
    get:
      description: Returns a single topic map
      operationId: getMapById
      parameters:
      - description: ID of topic to return a map for
        explode: false
        in: path
        name: topicId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapData'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Topic not found
      summary: Find map by ID
      tags:
      - map
  /map/{topicId}/edge:
    delete:
      description: delete edge
      operationId: deleteEdge
      parameters:
      - description: ID of topic to return a map for
        explode: false
        in: path
        name: topicId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: edgeId
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: Successful operation
        "405":
          description: Invalid input
      summary: delete edge
      tags:
      - map
    post:
      description: Add a new edge
      operationId: addEdge
      parameters:
      - description: ID of topic to return a map for
        explode: false
        in: path
        name: topicId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
        description: Create a new edge
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new edge
      tags:
      - map
  /node:
    delete:
      description: Deletes a specific node.
      operationId: deleteNode
      parameters:
      - explode: true
        in: query
        name: nodeId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: tid
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: Node deleted successfully
        "400":
          description: Invalid node ID
        "403":
          description: Forbidden
        "404":
          description: Node not found
      summary: Delete a node
      tags:
      - node
    get:
      description: get wiki node
      operationId: getNode
      parameters:
      - explode: true
        in: query
        name: nodeId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: tid
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeData'
          description: Successful operation
        "404":
          description: Topics not found
      summary: get wiki node
      tags:
      - node
    post:
      description: Add a new node
      operationId: addNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeData'
        description: Create a new node
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePostNode'
          description: Successful operation
        "405":
          description: Invalid input
      summary: Add a new node
      tags:
      - node
  /node/title:
    put:
      description: Update an existing node
      operationId: updateNodeTitle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeData'
        description: Update an existent node
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Node not found
        "405":
          description: Validation exception
      summary: Update a nodes title and description
      tags:
      - node
  /node/videoVote:
    put:
      description: Update an existing node
      operationId: updateNodeVideoVote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeData'
        description: Update an existent node
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The updated video vote count (or some other relevant
                  integer value).
                type: integer
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Node not found
        "405":
          description: Validation exception
      summary: Update a nodes video votes
      tags:
      - node
  /node/videoEdit:
    put:
      description: Update an existing node
      operationId: updateNodeVideoEdit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeData'
        description: Update an existent node
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Node not found
        "405":
          description: Validation exception
      summary: add or remove videos from a node
      tags:
      - node
  /node/battleVote:
    put:
      description: Update an existing node
      operationId: updateNodeBattleVote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeData'
        description: Update an existent node
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The updated battle vote count (or some other relevant
                  integer value).
                type: integer
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Node not found
        "405":
          description: Validation exception
      summary: battle vote a node
      tags:
      - node
  /node/freshVote:
    put:
      description: Update an existing node
      operationId: updateNodeFreshVote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeData'
        description: Update an existent node
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The updated fresh vote count (or some other relevant
                  integer value).
                type: integer
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Node not found
        "405":
          description: Validation exception
      summary: fresh vote a node
      tags:
      - node
  /node/flag:
    put:
      description: Update an existing node
      operationId: updateNodeFlag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeData'
        description: Update an existent node
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Node not found
        "405":
          description: Validation exception
      summary: fresh vote a node
      tags:
      - node
  /users/auth:
    get:
      description: return user
      operationId: AuthUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAuth2'
          description: students matching criteria
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAuth4'
          description: No user found with that data
      summary: return authenticated user details
      tags:
      - user
  /user:
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Update an existent user in the store
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
      summary: Update user
      tags:
      - user
  /user/{userId}:
    delete:
      description: This can only be done by the logged in user or admin.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: User Deleted
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
      - user
    get:
      description: ""
      operationId: getUserByName
      parameters:
      - description: 'The name that needs to be fetched. Use user1 for testing. '
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
components:
  schemas:
    NodeData:
      example:
        editedBy:
        - id: dkd94njd
          username: super123
        - id: dkd94njd
          username: super123
        createdBy:
          id: dkd94njd
          username: super123
        topic: bjj
        description: used to attack ninjas on Friday
        battleTested: 44
        id: 2024-12-09T04:10:00.350Z
        title: a ninja attack
        fresh: 55
        speed: 55
        isFlagged: true
        youtubeLinks:
        - addedBy:
            id: dkd94njd
            username: super123
          link: https://youtu.be/1MKKK94eGUo?si=uRr8UmZ0sgNl4BA0&t=397
          votes: 21
          dateAdded: 2024-08-19T19:25:42.568Z
        - addedBy:
            id: dkd94njd
            username: super123
          link: https://youtu.be/1MKKK94eGUo?si=uRr8UmZ0sgNl4BA0&t=397
          votes: 21
          dateAdded: 2024-08-19T19:25:42.568Z
      properties:
        id:
          example: 2024-12-09T04:10:00.350Z
          format: date-time
          type: string
        title:
          example: a ninja attack
          type: string
        topic:
          example: bjj
          type: string
        battleTested:
          example: 44
          format: int32
          type: integer
        fresh:
          example: 55
          format: int32
          type: integer
        speed:
          example: 55
          format: int32
          type: integer
        description:
          example: used to attack ninjas on Friday
          type: string
        isFlagged:
          example: true
          type: boolean
        youtubeLinks:
          items:
            $ref: '#/components/schemas/LinkData'
          type: array
        createdBy:
          $ref: '#/components/schemas/UserIdentifier'
        editedBy:
          items:
            $ref: '#/components/schemas/UserIdentifier'
          type: array
    LinkData:
      example:
        addedBy:
          id: dkd94njd
          username: super123
        link: https://youtu.be/1MKKK94eGUo?si=uRr8UmZ0sgNl4BA0&t=397
        votes: 21
        dateAdded: 2024-08-19T19:25:42.568Z
      properties:
        link:
          example: https://youtu.be/1MKKK94eGUo?si=uRr8UmZ0sgNl4BA0&t=397
          format: url
          type: string
        votes:
          example: 21
          format: int32
          type: integer
        addedBy:
          $ref: '#/components/schemas/UserIdentifier'
        dateAdded:
          example: 2024-08-19T19:25:42.568Z
          format: date-time
          type: string
    Edge:
      example:
        id: 2024-12-09T04:10:00.350Z-2024-12-09T04:10:00.351Z
        source: 2024-12-09T04:10:00.350Z
        target: 2024-12-09T04:10:00.352Z
      properties:
        id:
          example: 2024-12-09T04:10:00.350Z-2024-12-09T04:10:00.351Z
          type: string
        source:
          example: 2024-12-09T04:10:00.350Z
          format: date-time
          type: string
        target:
          example: 2024-12-09T04:10:00.352Z
          format: date-time
          type: string
    FlowNode:
      example:
        data:
          battleTested: 200
          title: arm bar
          fresh: 200
          speed: 75
        targetPosition: Position.Left
        SourcePosition: Position.Right
        id: 2024-12-09T04:10:00.350Z
        position:
          x: 100
          "y": 100
        type: flowNode
      properties:
        id:
          example: 2024-12-09T04:10:00.350Z
          format: date-time
          type: string
        position:
          $ref: '#/components/schemas/FlowNode_position'
        type:
          example: flowNode
          type: string
        targetPosition:
          example: Position.Left
          type: string
        SourcePosition:
          example: Position.Right
          type: string
        data:
          $ref: '#/components/schemas/FlowNode_data'
    User:
      example:
        freshUp:
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        lastLogin: 2000-01-23T04:56:07.000+00:00
        lastName: James
        role: 1
        edited:
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        created:
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        freshDown:
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        reputation: 34
        description: engineer
        videoUp:
        - www.youtube.com
        - www.youtube.com
        battleTestedUp:
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        isFlagged: true
        createdAt: 2000-01-23T04:56:07.000+00:00
        firstName: John
        provider: google
        videoDown:
        - www.youtube.com
        - www.youtube.com
        battleTestedDown:
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        - topic: bjj
          title: armbar
          nodeId: 2024-12-09T04:10:00.350Z
        location: Austin TX
        id: 2451632
        email: john@email.com
        updatedAt: 2000-01-23T04:56:07.000+00:00
        username: theUser
        linked:
        - addedBy:
            id: dkd94njd
            username: super123
          link: https://youtu.be/1MKKK94eGUo?si=uRr8UmZ0sgNl4BA0&t=397
          votes: 21
          dateAdded: 2024-08-19T19:25:42.568Z
        - addedBy:
            id: dkd94njd
            username: super123
          link: https://youtu.be/1MKKK94eGUo?si=uRr8UmZ0sgNl4BA0&t=397
          votes: 21
          dateAdded: 2024-08-19T19:25:42.568Z
      properties:
        provider:
          example: google
          type: string
        id:
          example: 2451632
          type: string
        lastLogin:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        username:
          example: theUser
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: James
          type: string
        email:
          example: john@email.com
          type: string
        role:
          description: User Status
          example: 1
          format: int32
          type: integer
        reputation:
          example: 34
          type: integer
        description:
          example: engineer
          type: string
        location:
          example: Austin TX
          type: string
        isFlagged:
          type: boolean
        battleTestedUp:
          items:
            $ref: '#/components/schemas/ResponseUserInfo_inner'
          type: array
        battleTestedDown:
          items:
            $ref: '#/components/schemas/ResponseUserInfo_inner'
          type: array
        freshUp:
          items:
            $ref: '#/components/schemas/ResponseUserInfo_inner'
          type: array
        freshDown:
          items:
            $ref: '#/components/schemas/ResponseUserInfo_inner'
          type: array
        edited:
          items:
            $ref: '#/components/schemas/ResponseUserInfo_inner'
          type: array
        created:
          items:
            $ref: '#/components/schemas/ResponseUserInfo_inner'
          type: array
        linked:
          items:
            $ref: '#/components/schemas/LinkData'
          type: array
        videoUp:
          items:
            example: www.youtube.com
            type: string
          type: array
        videoDown:
          items:
            example: www.youtube.com
            type: string
          type: array
    Topic:
      example:
        title: bjj
      properties:
        title:
          example: bjj
          type: string
      required:
      - title
    RequestPostNode:
      properties:
        source:
          example: 2024-12-09T04:10:00.350Z
          format: date-time
          type: string
        target:
          example: 2024-12-09T04:10:00.350Z
          format: date-time
          type: string
        topic:
          example: bjj
          type: string
      required:
      - source
      - target
      - topic
    ResponsePostNode:
      example:
        sourceId: 2024-12-09T04:10:00.350Z
        targetId: 2024-12-09T04:10:00.350Z
      properties:
        targetId:
          example: 2024-12-09T04:10:00.350Z
          format: date-time
          type: string
        sourceId:
          example: 2024-12-09T04:10:00.350Z
          format: date-time
          type: string
      required:
      - sourceId
      - targetId
    ResponsePostTopic:
      example:
        nodeData:
          editedBy:
          - id: dkd94njd
            username: super123
          - id: dkd94njd
            username: super123
          createdBy:
            id: dkd94njd
            username: super123
          topic: bjj
          description: used to attack ninjas on Friday
          battleTested: 44
          id: 2024-12-09T04:10:00.350Z
          title: a ninja attack
          fresh: 55
          speed: 55
          isFlagged: true
          youtubeLinks:
          - addedBy:
              id: dkd94njd
              username: super123
            link: https://youtu.be/1MKKK94eGUo?si=uRr8UmZ0sgNl4BA0&t=397
            votes: 21
            dateAdded: 2024-08-19T19:25:42.568Z
          - addedBy:
              id: dkd94njd
              username: super123
            link: https://youtu.be/1MKKK94eGUo?si=uRr8UmZ0sgNl4BA0&t=397
            votes: 21
            dateAdded: 2024-08-19T19:25:42.568Z
        topic:
          title: bjj
      properties:
        topic:
          $ref: '#/components/schemas/Topic'
        nodeData:
          $ref: '#/components/schemas/NodeData'
      required:
      - nodeData
      - topic
    ResponseUserInfo:
      items:
        $ref: '#/components/schemas/ResponseUserInfo_inner'
      type: array
    ResponseAuth2:
      example:
        isAuth: true
        role: 0
      properties:
        isAuth:
          type: boolean
        role:
          example: 0
          type: integer
      required:
      - isAuth
      - role
    ResponseAuth4:
      example:
        isAuth: false
        error: true
      properties:
        isAuth:
          example: false
          type: boolean
        error:
          type: boolean
    ResponseCookie:
      properties:
        w_authExp:
          type: string
        w_auth:
          type: string
    MapData:
      example:
        nodes:
        - data:
            battleTested: 200
            title: arm bar
            fresh: 200
            speed: 75
          targetPosition: Position.Left
          SourcePosition: Position.Right
          id: 2024-12-09T04:10:00.350Z
          position:
            x: 100
            "y": 100
          type: flowNode
        - data:
            battleTested: 200
            title: arm bar
            fresh: 200
            speed: 75
          targetPosition: Position.Left
          SourcePosition: Position.Right
          id: 2024-12-09T04:10:00.350Z
          position:
            x: 100
            "y": 100
          type: flowNode
        edges:
        - id: 2024-12-09T04:10:00.350Z-2024-12-09T04:10:00.351Z
          source: 2024-12-09T04:10:00.350Z
          target: 2024-12-09T04:10:00.352Z
        - id: 2024-12-09T04:10:00.350Z-2024-12-09T04:10:00.351Z
          source: 2024-12-09T04:10:00.350Z
          target: 2024-12-09T04:10:00.352Z
      properties:
        nodes:
          items:
            $ref: '#/components/schemas/FlowNode'
          type: array
        edges:
          items:
            $ref: '#/components/schemas/Edge'
          type: array
      required:
      - edges
      - nodes
    Login:
      properties:
        ssoProvider:
          enum:
          - google
          - facebook
          - microsoft
          - x
          - apple
          - discord
          type: string
    UserIdentifier:
      example:
        id: dkd94njd
        username: super123
      properties:
        username:
          example: super123
          type: string
        id:
          example: dkd94njd
          type: string
    FlowNode_position:
      example:
        x: 100
        "y": 100
      properties:
        x:
          example: 100
          format: int32
          type: integer
        "y":
          example: 100
          format: int32
          type: integer
    FlowNode_data:
      example:
        battleTested: 200
        title: arm bar
        fresh: 200
        speed: 75
      properties:
        title:
          example: arm bar
          type: string
        battleTested:
          example: 200
          format: int32
          type: integer
        fresh:
          example: 200
          format: int32
          type: integer
        speed:
          example: 75
          format: int32
          type: integer
    ResponseUserInfo_inner:
      example:
        topic: bjj
        title: armbar
        nodeId: 2024-12-09T04:10:00.350Z
      properties:
        topic:
          example: bjj
          type: string
        title:
          example: armbar
          type: string
        nodeId:
          example: 2024-12-09T04:10:00.350Z
          format: date-time
          type: string
